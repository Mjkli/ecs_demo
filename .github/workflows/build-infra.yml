name: Build Infrastructure
on: ["push"]
jobs:
  build:
    name: Check and deploy terraform
    runs-on: ubuntu-latest
    container: mjkli/iac-terraform:latest  # This is just an alpine image with terraform and aws cli on it - built in IAC_full project
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "us-west-1"
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2
      
      - name: Terraform Init
        run: terraform init
        working-directory: infra

      - name: Terraform validate
        run: terraform validate
        working-directory: infra

      
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -var "db_username=${{ secrets.DB_USERNAME }}" -var "db_password=${{ secrets.DB_PASSWORD }}"

      - name: Terraform Plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terrafrom Apply - Build ECR
        run: terraform apply -auto-approve -input=false -var "db_username=${{ secrets.DB_USERNAME }}" -var "db_password=${{ secrets.DB_PASSWORD }}" --target module.flask_app
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: build, tag, push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask_app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG flask_app/docker
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Terrafrom Apply - Build rest of Infrastructure
        run: terraform apply -auto-approve -input=false -var "db_username=${{ secrets.DB_USERNAME }}" -var "db_password=${{ secrets.DB_PASSWORD }}"



      


